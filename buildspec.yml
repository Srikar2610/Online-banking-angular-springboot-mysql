version: 0.2

env:
  variables:
    IMAGE_REPO_NAME: "online-banking"
    IMAGE_TAG: "latest"
    REGION: "us-east-1"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - apt-get update && apt-get install -y jq
      - echo Installing Docker...
      - nohup /usr/local/bin/dockerd-entrypoint.sh &>/tmp/dockerd.log &
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - echo Docker is ready.

      - echo Installing kubectl...
      - curl -LO "https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - mv kubectl /usr/local/bin/
      - kubectl version --client

      - echo Logging into Amazon ECR...
      - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com"

      - echo Configuring kubectl for EKS...
      - aws eks update-kubeconfig --region $REGION --name $EKS_CLUSTER_NAME

  pre_build:
    commands:
      - echo Build started on `date`
      - echo Compiling the application...
      - mvn clean package -DskipTests

  build:
    commands:
      - echo Building Docker image...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG "$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"

  post_build:
    commands:
      - echo Pushing Docker image to Amazon ECR...
      - docker push "$AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"

      - echo Copying Kubernetes manifest files to artifact folder...
      - mkdir -p k8s-out
      - cp k8s/*.yaml k8s-out/
      - ls -l k8s-out

      - echo Configuring access to EKS cluster...
      - export KUBECONFIG=$HOME/.kube/config
      - aws eks update-kubeconfig --region $REGION --name $EKS_CLUSTER_NAME

      - echo Authenticating kubectl with EKS...
      - export K8S_TOKEN=$(aws eks get-token --region $REGION --cluster-name $EKS_CLUSTER_NAME --output json | jq -r '.status.token')
      - kubectl config set-credentials aws --token="$K8S_TOKEN"

      - echo Deploying to EKS cluster...
      # - kubectl apply -f k8s/
      
artifacts:
  base-directory: k8s-out
  files:
    - deployment.yaml
    - service.yaml
    - namespace.yaml
